# This GitHub Action workflow lints and formats Python code using Ruff.
# It runs on every pull request that modifies Python files.
#
# The workflow has the following steps:
# 1. Checks out the code.
# 2. Installs uv, the fast Python package installer.
# 3. Sets up a Python environment and installs ruff using uv.
# 4. Runs 'ruff check --fix' to find and automatically fix linting errors,
#    capturing the command's output. This step will fail if there are any
#    errors that ruff cannot fix automatically.
# 5. If linting was successful, it commits any auto-fixed files. The commit
#    message will include the output from the initial ruff run.
# 6. Runs 'ruff format' to ensure consistent code formatting.
# 7. Commits any files that were changed by the formatter.

name: Lint, Format and Commit

on:
  pull_request:
    paths:
      - '**.py'

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    permissions:
      # Required to write changes to the repository
      contents: write
      # Optional: Required to write a review comment on the PR
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # This is required to allow the git-auto-commit-action to push changes
          ref: ${{ github.head_ref }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python and install ruff
        run: |
          uv python install
          uv tool install ruff

      - name: Run ruff to check, autofix, and capture output
        id: ruff-check
        run: |
          # Run ruff, redirecting all output to a file. Then capture the exit code.
          # This ensures we can pass the output to the commit message even if the step fails.
          ruff check . --fix --show-fixes > ruff_output.txt 2>&1
          RUFF_EXIT_CODE=$?

          # Pass the output to subsequent steps regardless of the exit code.
          RUFF_OUTPUT=$(cat ruff_output.txt)
          echo "ruff_output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$RUFF_OUTPUT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          # Exit with ruff's original exit code.
          # The step will succeed if ruff fixed all errors, and fail if unfixable errors remain.
          exit $RUFF_EXIT_CODE

      - name: Commit linting fixes
        # This step only runs if the previous 'ruff check' step succeeds.
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: |
            style: fix linting issues with ruff

            ${{ steps.ruff-check.outputs.ruff_output }}
          file_pattern: "*.py"

      - name: Run ruff to format the code
        # We replace the ruff-action with a direct run command for consistency.
        run: ruff format .

      - name: Commit formatting changes
        # This step only runs if the previous 'ruff format' step succeeds.
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "style: format code with ruff"
          file_pattern: "*.py"
